namespace :test do
  
  desc "Chains the processing steps together to create a dataset from folders of images and train the RF"
  task :rf => [:set_options, 'common:save_images', :run_r, :analyze]
  
  desc "Sets where the folder of images to preprocess is, destination and preprocessing requirements"
  task :set_options do
    puts "Reading configuration for #{GROUP}"
    CONFIG = YAML.load_file("#{File.dirname(__FILE__)}/../config/test.yml")[GROUP]
    throw "Error: no samples folder" unless CONFIG["samples"]
    @samples = CONFIG["samples"]
    throw "Error: no forests folder" unless CONFIG["forests"]  and File.directory?(CONFIG['forests'])
    @forests_folder = CONFIG['forests']
    throw "Error: no type folder" unless CONFIG['type']
    @type_file = File.expand_path(CONFIG['type']+"/#{GROUP}_test_types.dat")
    
    # create directory for the training datasets
    throw "Error: no temp folder" unless CONFIG["images"]
    @images_folder = CONFIG['images']
    puts "removing #{@images_folder}"
    rm_rf(@images_folder)
    puts "creating directory structure for : #{@images_folder}"
    mkdir_p @images_folder
    # samples is a hash with folder/name => classification_type
    throw "Error: no script folder given" unless CONFIG["script"] and File.directory?(CONFIG["script"])
    @script_folder = CONFIG['script']
    @type_folder = CONFIG['types'] || @script_folder  
  end
  
  desc "Runs the R script, passing in the necessary variables"
  task :run_r => 'common:save_images' do
   script_name = "#{@script_folder}/#{GROUP}_test.R"
   puts "Creating script: #{script_name}"
   helper_script = File.expand_path(File.dirname(__FILE__)+"/../R/test.R")
   full_images_folder = File.expand_path(File.dirname(__FILE__)+"/../"+@images_folder)
   forest_group_full_path = File.expand_path(@forests_folder)

   script = RScriptMaker.new(script_name)
   script.assign("images_folder", "\'#{full_images_folder}\'")
   script.assign("forests_folder", "\'#{forest_group_full_path}\'")
   script.assign("r_directory", "\'#{File.expand_path(File.dirname(__FILE__)+"/../R/")}\'")
   script.assign("types", "\'#{@type_file}\'")
   script.run(helper_script)
   script.quit
   script.close
   puts "Executing script: #{script.name}..."
   script.execute 
  end
  
  desc "analyze the results generated by the test"
  task :analyze do 
    puts "Analyzing results"
  end
  
  # desc "Write R script to test a random forest"
  # task :write_r_script => "common:create_tables" do
  #   script_folder = CONFIG['script'] || "scripts"
  #   tree_folder = CONFIG['forest']
  #   
  #   tree_name = CONFIG['name'] || GROUP
  #   puts "Creating script folder if necessary: #{script_folder}"
  #   mkdir_p script_folder
  #   @script_name = "#{script_folder}/#{tree_name}_test.R"
  #   puts "Creating script: #{@script_name}"
  #   
  #   puts "#{File.expand_path(tree_folder)} --"
  #   # Create the R script for this traingset / RF
  #   
  #   forest_file_name = "#{tree_folder}/#{tree_name}.rf"
  #   set_name = 'testing_set'
  #   output_name = 'predictions'
  #   output_file = "#{File.expand_path(script_folder)}/#{tree_name}_preditions.txt"
  #   
  #   script = RScriptMaker.new(@script_name)
  #   script.library 'randomForest'
  #   script.load_matrix(set_name, @data_set_name, @rows,@cols)
  #   script.load forest_file_name
  #   script.command "#{output_name} <- predict(#{tree_name}_rf, #{set_name})"
  #   script.save_matrix(output_name,output_file)
  #   script.quit
  #   script.close
  #   
  #   puts "Running script"
  #   script.execute
  #   
  #   # script_file = File.open(@script_name, 'w') do |file|
  #   #   file << "library(\'randomForest\')\n"
  #   #   file << "testing_set = matrix(scan(\'#{File.expand_path(@data_set_name)}\', n=#{@rows*@cols}),"
  #   #   file << " #{@rows}, #{@cols}, byrow = TRUE)\n"
  #   #   file << "load(file=\'#{File.expand_path(tree_folder)}/#{tree_name}.rf\')\n"
  #   #   file << "predictions <- predict(#{tree_name}_rf, testing_set)\n"
  #   #   file << "write.table(predictions, file=\"#{File.expand_path(script_folder)}/#{tree_name}_preditions.txt\" )\n"
  #   # end
  # end
  
  
end